makeCacheMatrix <- function(x = matrix()) {
t <- NULL  ##initializing inverse as NULL
set <- function(y){
x <<- y
t <<- NULL
}
get <- function()x ##function to get matrix x
setInverse <- function(inverse) t <<- inverse
getInverse <- function() t
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x, ...) {  ## gets cache data
## Return a matrix that is the inverse of 'x'
t <- x$getInverse()
if(!is.null(t)){   ##checking whether inverse is NULL
message("getting cached data")
return(t)  ##returns inverse value
}
mat <- x$get()
t <- solve(mat,...)  ##calculates inverse value
x$setInverse(t)
t  ## return a matrix that is the inverse of "x"
}
f<makeCacheMatrix(matrix(1:4,2,2))
f<-makeCacheMatrix(matrix(1:4,2,2))
f$get()
f$getInverse()
cacheSolve(f)
